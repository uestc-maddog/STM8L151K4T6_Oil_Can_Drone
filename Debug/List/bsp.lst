###############################################################################
#
# IAR C/C++ Compiler V2.10.4.157 for STM8                 18/Jan/2017  19:19:19
# Copyright 2010-2015 IAR Systems AB.
#
#    Source file  =  E:\Github Project\STM8L151K4T6_Oil_Can_Drone\BSP\bsp.c
#    Command line =  
#        "E:\Github Project\STM8L151K4T6_Oil_Can_Drone\BSP\bsp.c" -e -Ol
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_cross_call --debug --code_model medium --data_model medium -o
#        "E:\Github Project\STM8L151K4T6_Oil_Can_Drone\Debug\Obj\"
#        --dlib_config "E:\My Program\IAR_STM8-7.0\stm8\LIB\dlstm8mmf.h" -D
#        STM8L15X_MD -lcN "E:\Github
#        Project\STM8L151K4T6_Oil_Can_Drone\Debug\List\" -I "E:\Github
#        Project\STM8L151K4T6_Oil_Can_Drone\" -I "E:\Github
#        Project\STM8L151K4T6_Oil_Can_Drone\STM8L15x_StdPeriph_Driver\inc\" -I
#        "E:\Github Project\STM8L151K4T6_Oil_Can_Drone\APP\" -I "E:\Github
#        Project\STM8L151K4T6_Oil_Can_Drone\BSP\" --vregs 16
#    List file    =  
#        E:\Github Project\STM8L151K4T6_Oil_Can_Drone\Debug\List\bsp.lst
#    Object file  =  
#        E:\Github Project\STM8L151K4T6_Oil_Can_Drone\Debug\Obj\bsp.o
#
###############################################################################

E:\Github Project\STM8L151K4T6_Oil_Can_Drone\BSP\bsp.c
      1          /*===========================================================================
      2          * 网址 ：http://www.cdebyte.com/   http://yhmcu.taobao.com/                 *
      3          * 作者 ：李勇  原 亿和电子工作室  现 亿佰特电子科技有限公司                 * 
      4          * 邮件 ：yihe_liyong@126.com                                                *
      5          * 电话 ：18615799380                                                        *
      6          ============================================================================*/
      7          
      8          #include "bsp.h"
      9          
     10          extern void TIM3_Set(u8 sta);                         // 设置TIM3的开关   sta:0，关闭   1，开启
     11          
     12          /*===========================================================================
     13          * 函数 ：SClK_Initial() => 初始化系统时钟，系统时钟 = 4MHZ                  *
     14          ============================================================================*/
     15          void SClK_Initial(void)
     16          {
     17              CLK_SYSCLKDivConfig(CLK_SYSCLKDiv_4); //内部时钟为4分频 = 4Mhz 
     18          }
     19          
     20          /*===========================================================================
     21          * 函数 ：GPIO_Initial() => 初始化通用IO端口                                 *
     22          ============================================================================*/
     23          void GPIO_Initial(void)
     24          {
     25              // 配置LED引脚       PC4
     26              GPIO_Init(PORT_LED, PIN_LED, GPIO_Mode_Out_PP_Low_Slow);          // 初始化为低电平    点亮LED 
     27              
     28              // 配置SWITCH引脚    PD1 PD2
     29              GPIO_Init(PORT_SWITCH, PIN_SWITCH, GPIO_Mode_Out_PP_Low_Slow);    // 初始化为低电平    相当于SWITCH_ON
     30              GPIO_Init(PORT_SMGEN, PIN_SMGEN, GPIO_Mode_Out_PP_Low_Slow);      
     31               
     32              // 配置CC1101相关控制引脚 CSN(PB4), IRQ(PB3), GDO2(PA3)
     33              GPIO_Init(PORT_CC_IRQ, PIN_CC_IRQ, GPIO_Mode_In_FL_No_IT);
     34              GPIO_Init(PORT_CC_GDO2, PIN_CC_GDO2, GPIO_Mode_In_PU_No_IT);
     35              
     36              GPIO_Init(PORT_CC_CSN, PIN_CC_CSN, GPIO_Mode_Out_PP_High_Fast);  // CSN拉高
     37          }
     38          
     39          /*===========================================================================
     40          * 函数 USART1_Initial() => 初始化串口                                 *
     41          ============================================================================*/
     42          void USART1_Initial(void)
     43          {
     44              // 串口初始化
     45              CLK_PeripheralClockConfig(CLK_Peripheral_USART1, ENABLE); //使能外设时钟，STM8L外设时钟默认关闭
     46              USART_Init(USART1,9600,USART_WordLength_8b,USART_StopBits_1,USART_Parity_No,USART_Mode_Tx|USART_Mode_Rx);//USART初始化，9600，8N1
     47              
     48              USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);// 使能接收中断
     49              U1_Set(1);                                    // 使能USART1 
     50          }
     51          
     52          // ADC初始化     PA4  ADC1_IN2
     53          void ADC_Initial(void)
     54          {
     55              CLK_PeripheralClockConfig(CLK_Peripheral_ADC1, ENABLE);  // 使能ADC1时钟
     56              GPIO_Init(GPIOA, GPIO_Pin_4, GPIO_Mode_In_FL_No_IT);     // 设置PA->4 为悬空输入，并中断禁止
     57              ADC_Init(ADC1,
     58                       ADC_ConversionMode_Single,   // 单次转换模式
     59                       ADC_Resolution_12Bit,        // 12位精度转换械
     60                       ADC_Prescaler_2              // 时钟设置为2分频
     61                       );  
     62          
     63              ADC_ChannelCmd(ADC1,
     64                             ADC_Channel_2,         // 设置为通道2进行采样
     65                             ENABLE);
     66          
     67              ADC_Cmd(ADC1 , ENABLE);               // 使能ADC  
     68              
     69              ADC_Data_Read();                      // 预先读取两次误差较大的值
     70              ADC_Data_Read();                      
     71          }
     72          
     73          // 读取ADC完成一次模数转换结果
     74          uint16_t ADC_Data_Read(void)
     75          {
     76            ADC_SoftwareStartConv(ADC1);      //启动ADC
     77          
     78            while(ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == 0);   // 等待转换结束
     79            ADC_ClearFlag(ADC1, ADC_FLAG_EOC);                   // 清除中断标志
     80            return ADC_GetConversionValue(ADC1);                // 读取ADC1，通道1的转换结果
     81          }
     82          
     83          /*===========================================================================
     84          * 函数 ：SPI_Initial() => 初始化SPI                                         *
     85          ============================================================================*/
     86          void SPI_Initial(void)
     87          {
     88              CLK_PeripheralClockConfig(CLK_Peripheral_SPI1, ENABLE);
     89              
     90              SPI_DeInit(SPI1);
     91              
     92              // 配置SPI相关参数,2分频（2MHZ）
     93              SPI_Init(SPI1, SPI_FirstBit_MSB, SPI_BaudRatePrescaler_2,
     94                   SPI_Mode_Master, SPI_CPOL_Low, SPI_CPHA_1Edge,
     95                   SPI_Direction_2Lines_FullDuplex, SPI_NSS_Soft, 7);
     96            
     97              SPI_Cmd(SPI1,ENABLE);
     98              
     99              // SPI相关IO口配置
    100              GPIO_Init(PORT_SPI, PIN_MISO, GPIO_Mode_In_PU_No_IT);       // MISO (PB7)
    101              GPIO_Init(PORT_SPI, PIN_SCLK, GPIO_Mode_Out_PP_High_Fast);  // SCLK (PB5)
    102              GPIO_Init(PORT_SPI, PIN_MOSI, GPIO_Mode_Out_PP_High_Fast);  // MOSI (PB6)
    103          }
    104          
    105          /*===========================================================================
    106          * 函数 ：TIM3_Initial() => 初始化定时器3，定时时间为1ms                     *
    107          ============================================================================*/
    108          void TIM3_Initial(void)
    109          {
    110              TIM3_DeInit();
    111          
    112              CLK_PeripheralClockConfig(CLK_Peripheral_TIM3, ENABLE);
    113          
    114              // 配置Timer3相关参数，时钟为4/4 = 1MHZ，定时时间 = 1000/1000000 = 1ms
    115              TIM3_TimeBaseInit(TIM3_Prescaler_4, TIM3_CounterMode_Up, 1000);
    116              TIM3_ARRPreloadConfig(ENABLE);     // 使能定时器3自动重载功能  
    117              TIM3_Set(0);                       // 关闭TIM3
    118          }
    119          
    120          /*===========================================================================
    121          * 函数 ：SPI_ExchangeByte() => 通过SPI进行数据交换                          * 
    122          * 输入 ：需要写入SPI的值                                                    * 
    123          * 输出 ：通过SPI读出的值                                                    * 
    124          ============================================================================*/
    125          INT8U SPI_ExchangeByte(INT8U input)
    126          {
    127              SPI_SendData(SPI1, input);
    128              while(RESET == SPI_GetFlagStatus(SPI1, SPI_FLAG_TXE));   // 等待数据传输完成	
    129              while(RESET == SPI_GetFlagStatus(SPI1, SPI_FLAG_RXNE));  // 等待数据接收完成
    130              return(SPI_ReceiveData(SPI1));
    131          }
    132          
    133          void RTC_Initial(void)
    134          {
    135          #if RTC_CLK == RTC_CLK_LSI   // 内部38K时钟
    136              
    137              printf("RTC_CLK_LSI\r\n");
    138              
    139              CLK_LSICmd(ENABLE);                                          // 打开芯片内部的低速振荡器LSI
    140              while(CLK_GetFlagStatus(CLK_FLAG_LSIRDY) == RESET);         // 等待振荡器稳定
    141              CLK_RTCClockConfig(CLK_RTCCLKSource_LSI, CLK_RTCCLKDiv_1);   // 选择LSI作为RTC时钟源   1分频
    142                                 
    143          #else                       // 外部32K时钟
    144              
    145              printf("RTC_CLK_LSE\r\n");
    146              CLK_LSEConfig(CLK_LSE_ON);  
    147              while(CLK_GetFlagStatus(CLK_FLAG_LSERDY) == RESET);          // 等待振荡器稳定 
    148              CLK_RTCClockConfig(CLK_RTCCLKSource_LSE, CLK_RTCCLKDiv_1);   // 选择LSE作为RTC时钟源   1分频
    149          
    150          #endif
    151              
    152              CLK_PeripheralClockConfig(CLK_Peripheral_RTC , ENABLE);    //使能实时时钟RTC时钟
    153              
    154              RTC_Set(22 , 15 , 26 , 16 , 7 , 23 , 6); //向实时时钟里设置，时分秒，年月日，星期分别是：22时15分20秒，2016年7月23日星期6
    155          }
    156          
    157          void RTC_Set(unsigned char hour , unsigned char min , unsigned char second , unsigned int year ,unsigned char month ,unsigned char day ,unsigned char week)
    158          { 
    159            RTC_InitTypeDef  RTCInit;
    160            RTC_TimeTypeDef RTCTime;
    161            RTC_DateTypeDef RTCData;
    162            
    163            RTC_WriteProtectionCmd(DISABLE);  //解除RTC数据保护
    164            
    165            RTC_EnterInitMode();    //设置RTC进入初始化模式，允许对RTC时间和日期寄存器进行设置
    166            while(RTC_GetFlagStatus(RTC_FLAG_INITF) == RESET);  //等待设置允许 等待INITF == 1完成允许设置
    167          
    168            RTCInit.RTC_HourFormat = RTC_HourFormat_24;
    169            RTCInit.RTC_AsynchPrediv = 37;
    170            RTCInit.RTC_SynchPrediv = 999;
    171            RTC_Init(&RTCInit);
    172          
    173            RTC_RatioCmd(ENABLE);
    174          
    175            RTCTime.RTC_Hours = hour;
    176            RTCTime.RTC_Minutes = min;
    177            RTCTime.RTC_Seconds = second;
    178            RTCTime.RTC_H12 = RTC_H12_AM;     //24
    179            RTC_SetTime(RTC_Format_BIN , &RTCTime);
    180            
    181            RTCData.RTC_WeekDay = (RTC_Weekday_TypeDef)week;   //RTC_Weekday_Sunday;    //sunday
    182            RTCData.RTC_Month = (RTC_Month_TypeDef)month;    //RTC_Month_August;      //8month
    183            RTCData.RTC_Date = day;      //14days
    184            RTCData.RTC_Year = year;
    185            RTC_SetDate(RTC_Format_BIN , &RTCData);
    186             
    187            RTC_ExitInitMode(); //不允许设置
    188            
    189            RTC_WriteProtectionCmd(ENABLE);//向密钥寄存器里进行写保护
    190          }
    191          
    192          // 设置TIM3的开关
    193          // sta:0，关闭   1，开启
    194          void TIM3_Set(u8 sta)
    195          {
    196              if(sta)
    197              {  
    198                  TIM3_SetCounter(0);     // 计数器清空
    199                  TIM3_ITConfig(TIM3_IT_Update,ENABLE);   // 使能TIM3更新中断
    200                  TIM3_Cmd(ENABLE);      // 使能TIM3	
    201              }
    202              else 
    203              {
    204                  TIM3_Cmd(DISABLE);     // 关闭TIM3		   
    205                  TIM3_ITConfig(TIM3_IT_Update,DISABLE);  // 关闭TIM3更新中断
    206              }
    207          }
    208          
    209          void CSB_Initial(void)
    210          {
    211              GPIO_Init(GPIOC, GPIO_Pin_0, GPIO_Mode_Out_PP_High_Fast);   // 初始化为高电平 等效于CSB_Sleep 
    212          }
    213          
    214          // 设置USART1的开关
    215          // sta:0，关闭   1，开启
    216          void U1_Set(u8 sta)
    217          {
    218              if(sta) USART_Cmd(USART1, ENABLE);   // 使能USART1 
    219              else    USART_Cmd(USART1, DISABLE);  // 关闭USART1 
    220          }
    221          /*===========================================================================
    222          -----------------------------------文件结束----------------------------------
    223          ===========================================================================*/

   Section sizes:

   Bytes  Function/Label
   -----  --------------
      14  ?_0
      36  ADC_Data_Read
      65  ADC_Initial
      13  CSB_Initial
      76  GPIO_Initial
      70  RTC_Initial
     140  RTC_Set
       6  SClK_Initial
      40  SPI_ExchangeByte
      93  SPI_Initial
      36  TIM3_Initial
      37  TIM3_Set
      20  U1_Set
      53  USART1_Initial

 
 685 bytes in section .far_func.text
  14 bytes in section .near.rodata
 
 685 bytes of CODE  memory
  14 bytes of CONST memory

Errors: none
Warnings: 1
